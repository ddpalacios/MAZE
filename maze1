#include <stdio.h>
#include <stdlib.h>

#define SIZE 100
struct dataitem
{
  int size;     // Will be 2 for pairs and 1 for single integers
  int data[2];
};

struct queue {
  struct dataitem items[SIZE];
  int front;
  int rear;
};


struct queue* createQueue() {
  struct queue* q = malloc(sizeof *q);
  q->front = 0;
  q->rear = 0;
  return q;
}

int full(struct queue* q)
{
  return (((q->rear + 1) % SIZE) == q->front);
}

// Add single integer
void enqueue_int(struct queue* q, int value){
  if (full(q))
  {
    printf("\nQueue is Full!!");
    return;
  }

  q->items[q->rear].size = 1;
  q->items[q->rear].data[0] = value;
  q->rear++;
}

// Add pair of integers
void enqueue_pair(struct queue* q, int* values){
  if (full(q))
  {
    printf("\nQueue is Full!!");
    return;
  }

  q->items[q->rear].size = 2;
  q->items[q->rear].data[0] = values[0];
  q->items[q->rear].data[1] = values[1];
  q->rear++;
}

void printQueue(struct queue* q)
{
  int tmp = q->front;
  printf("\nQueue Contains: ");
  int flag = 0;
  while(tmp != q->rear)
  {
    if (flag) printf(", ");
    flag = 1;
    if (q->items[tmp].size > 1)
    {
      printf("(%d,%d)", q->items[tmp].data[0], q->items[tmp].data[1]);
    }
    else
    {
      printf("%d", q->items[tmp].data[0]);
    }
    tmp = (tmp + 1) % SIZE;
  }
  printf("\n");
}



int loadFile(char* filename);
int getRowCount(FILE* fp);
int getColCount(FILE* fp);
void CreateGrid(char* filename,FILE* fp, int rowCount, int colNum);

void solve(FILE* fp,int xstart, int ystart, int colNum, int rowCount);
int items[SIZE], front = -1, rear = -1;

typedef struct cord{
    int x,y;
}Cord;

struct node {
        int data;
        struct node *next;
    } *head, *temp, *curr, *left;


int main()
{
char c[10];
printf("Enter Maze File:\n> ");
gets(c);
loadFile(c);
  return 0;
}









int loadFile(char* filename)
{
     
     FILE *fp;
     fp = fopen(filename, "r");
      if (fp == NULL){
        printf("Could not open file %s",filename);
        return 0;
    }
    else{
        printf("FILE LOADED...\n\n");
        int colNum = getColCount(fp);
        int rowCount = getRowCount(fp);
        fclose(fp); //close file
        fp = fopen(filename, "r");   //reopen
        CreateGrid(filename,fp, rowCount, colNum);
        
       
        
        
        
        return 0;
        
    }
    
    
    
    
}
int getColCount(FILE* fp)
{
    char col[200];
     int colNum;
     
    fscanf(fp,"%[^\n]", col);
    colNum = strlen(col) +1; //get total col count
       
       
return colNum;    
    
}
int getRowCount(FILE* fp)
{
     char c;
     int Rowcount =1;
     
     for (c = getc(fp); c != EOF; c = getc(fp)) {
        if (c == '\n'){ // Increment count if this character is newline 
            Rowcount = Rowcount + 1; 
        }
}
return Rowcount;
    
    
}
void CreateGrid(char* filename, FILE* fp, int rowCount, int colNum)
{
    int i, j,rr,cc;
   struct queue* q = createQueue();
    int cords[2];
  int curr;
  int dr[4] = {-1,1,0,0};
  int dc[4] = {0,0,1,-1};
     
     int dimensions[rowCount][colNum];
        for (i = 0; i < rowCount; i++) {
           
             for (j = 0; j < colNum; j++) {
                    char brick = getc(fp);
                  dimensions[i][j] = brick;
                   
                   if (brick == ' '){
                       dimensions[i][j] = '1';
                   }
                   
                  if (brick == 's'){
                      cords[0] = i;//row
                      cords[1] = j;//col
                      enqueue_pair(q, cords);
                      
                     
                      
                  }
                
                  printf("%c", dimensions[i][j]);
        }
    }
   
    
    
    
printQueue(q);
   
    
    fclose(fp); //close file
    fp = fopen(filename, "r");   //reopen
  solve(fp, cords[0], cords[1], colNum, rowCount);
    

}



void solve(FILE* fp,int xstart, int ystart, int colNum, int rowCount)
{
    printf("\nMAZE SOLVED. POSSIBLE PATHS AT STARTING POINT: (%d, %d)\n", xstart,ystart);
    struct queue* q = createQueue();
     int i, j;
  for (i = 0; i < rowCount; i++) {
            deleteAll();
           
             for (j = 0; j < colNum; j++) {
                 char graphNode = getc(fp);
               
                 if (graphNode == ' '){
                     add(NULL); //null value set to zero
                     append(j); //appends front of Linked List
                     delete(0); //removes null 0 value
                     
                 }
                 
    
    
             }
            printf("\nRow [%d] -> ", i);
            disp(); //displays linked list
      
  }
    
}







//Linked List implementation
void add(int num) {
        int i=0;
        temp = (struct node *) malloc(sizeof(struct node));
        temp->data = num;
 
            if(head == NULL) {
                head = temp;
                head->next = NULL;
            }
            else
            {
                temp->next = head;                
                head = temp;
            }
 
    }
void append(int data) {
 
        temp = (struct node *) malloc(sizeof(struct node));
        temp->data = data;
        curr = head;
 
        if(curr == NULL) {
            head = temp; 
            head->next = NULL;
        }
         
        while(curr->next != NULL) {
            curr = curr->next;
        }
        curr->next = temp;
        curr = temp;
        curr->next = NULL;
    }
void delete(int num) {
        curr = head;
 
        if(curr == NULL) {
            printf("Link List is empty");
        }
        else
        {
            while(curr != NULL) {
                
                if(curr->data == num) {
 
                    if(curr == head) {
                    head = curr->next;
                    free(curr);
                    break;
                }
                    left->next = curr->next;
                    free(curr);
                    break;
                }
                else {
                    left = curr;
                    curr = curr->next;
                }
            } //while loop
        }
    }
void disp() {
        if(head == NULL) {
            printf("Link list is empty");
            return;
        }
        else { 
            curr = head;
                
                while(curr != NULL) {
                    printf("%d ->  ",curr->data);
                    curr = curr->next;
                } //while
            }//else
        }
 void deleteAll() {
        curr = head;
        if(curr == NULL) {
          //  printf("Link list is empty");
        }
        else {
            while(curr != NULL) {
                left = curr->next;
                free(curr);
                curr = left;
            }
            head = NULL;
          // printf("Deleted Link list");
        }
    }

