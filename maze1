#include <stdio.h>
#define SIZE 1000

int loadFile(char* filename);
int getRowCount(FILE* fp);
int getColCount(FILE* fp);
void CreateGrid(FILE* fp, int rowCount, int colNum);
void enQueue(int);
void deQueue();
void display();
void solve(int xstart, int ystart);
int items[SIZE], front = -1, rear = -1;



int main(void) {
    
loadFile("maze.txt");

return 0;
}

int loadFile(char* filename)
{
     
     FILE *fp;
     fp = fopen(filename, "r");
      if (fp == NULL){
        printf("Could not open file %s",filename);
        return 0;
    }
    else{
        printf("FILE LOADED...\n\n");
        int colNum = getColCount(fp);
        int rowCount = getRowCount(fp);
        fclose(fp); //close file
        fp = fopen(filename, "r");   //reopen
        CreateGrid(fp, rowCount, colNum);
        
       
        
        
        
        return 0;
        
    }
    
    
    
    
}
int getColCount(FILE* fp)
{
    char col[200];
     int colNum;
     
    fscanf(fp,"%[^\n]", col);
    colNum = strlen(col) +1; //get total col count
       
       
return colNum;    
    
}
int getRowCount(FILE* fp)
{
     char c;
     int Rowcount =1;
     
     for (c = getc(fp); c != EOF; c = getc(fp)) {
        if (c == '\n'){ // Increment count if this character is newline 
            Rowcount = Rowcount + 1; 
        }
}
return Rowcount;
    
    
}
void CreateGrid(FILE* fp, int rowCount, int colNum)
{
    int i, j;
    int startPos[2];
   
     
     int dimensions[rowCount][colNum];
        
        for (i = 0; i < rowCount; i++) {
             for (j = 0; j < colNum; j++) {
                    char brick = getc(fp);
                   dimensions[i][j] = brick;
                   if (brick == 's'){
                      
                       startPos[0] = i;
                       startPos[1] = j;

                   }
                    printf("%c", dimensions[i][j]);
        }
        
        
      
    }
    solve(startPos[0], startPos[1]);
    

}



void solve(int xstart, int ystart)
{
    printf("\nStarting point at Row: %d Col: %d", xstart, ystart);
    
    
    
}





void enQueue(int value)
{
   if(rear == SIZE-1)
        printf("\nQueue is Full!!");
    else {
        if(front == -1)
            front = 0;
        rear++;
        items[rear] = value;
        printf("\nInserted -> %d", value);
    }
}
void deQueue(){
    if(front == -1)
        printf("\nQueue is Empty!!");
    else{
        printf("\nDeleted : %d", items[front]);
        front++;
        if(front > rear)
            front = rear = -1;
    }
}  

void display(){
    if(rear == -1)
        printf("\nQueue is Empty!!!");
    else{
        int i;
        printf("\nQueue elements are:\n");
        for(i=front; i<=rear; i++)
            printf("%d\t",items[i]);
    }
}
